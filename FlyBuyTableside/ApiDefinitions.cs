using System;
using Foundation;
using ObjCRuntime;

namespace FlyBuy
{
	[Static]
	partial interface Constants
	{
		// extern double FlyBuyTablesideVersionNumber;
		[Field ("FlyBuyTablesideVersionNumber", "__Internal")]
		double FlyBuyTablesideVersionNumber { get; }

		// extern const unsigned char [] FlyBuyTablesideVersionString;
		[Field ("FlyBuyTablesideVersionString", "__Internal")]
		NSString FlyBuyTablesideVersionString { get; }
	}

	// @interface FlyBuyAPIError : NSObject
	[BaseType (typeof(NSObject))]
	[DisableDefaultCtor]
	interface FlyBuyAPIError
	{
		// @property (readonly, nonatomic) enum FlyBuyAPIErrorType type;
		[Export ("type")]
		FlyBuyAPIErrorType Type { get; }

		// @property (readonly, nonatomic) NSInteger statusCodeInt;
		[Export ("statusCodeInt")]
		nint StatusCodeInt { get; }

		// @property (readonly, copy, nonatomic) NSString * _Nonnull description;
		[Export ("description")]
		string Description { get; }
	}

	// @interface FlyBuyTablesideManager : NSObject
	[BaseType (typeof(NSObject))]
	interface FlyBuyTablesideManager
	{
		// @property (readonly, nonatomic, strong, class) FlyBuyTablesideManager * _Nonnull shared;
		[Static]
		[Export ("shared", ArgumentSemantic.Strong)]
		FlyBuyTablesideManager Shared { get; }

		// @property (readonly, nonatomic) NSInteger maxPayloadSize;
		[Export ("maxPayloadSize")]
		nint MaxPayloadSize { get; }

		// @property (copy, nonatomic) NSString * _Nullable apiToken;
		[NullAllowed, Export ("apiToken")]
		string ApiToken { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable kitID;
		[NullAllowed, Export ("kitID")]
		string KitID { get; set; }

		// @property (nonatomic, strong) id<TablesideSiteMonitorDelegate> _Nullable delegate;
		[NullAllowed, Export ("delegate", ArgumentSemantic.Strong)]
		NSObject WeakDelegate { get; set; }

		// -(void)configureWithKitID:(NSString * _Nonnull)kitID apiToken:(NSString * _Nonnull)apiToken;
		[Export ("configureWithKitID:apiToken:")]
		void ConfigureWithKitID (string kitID, string apiToken);

		// -(void)findSitesWithReferenceID:(NSString * _Nonnull)referenceID callback:(void (^ _Nonnull)(NSArray<TablesideSite *> * _Nullable, NSError * _Nullable))callback;
		[Export ("findSitesWithReferenceID:callback:")]
		void FindSitesWithReferenceID (string referenceID, Action<NSArray<TablesideSite>, NSError> callback);

		// -(void)createLocatorWithSite:(TablesideSite * _Nonnull)site additionalData:(NSString * _Nullable)additionalData callback:(void (^ _Nonnull)(TablesideLocator * _Nullable, NSError * _Nullable))callback;
		[Export ("createLocatorWithSite:additionalData:callback:")]
		void CreateLocatorWithSite (TablesideSite site, [NullAllowed] string additionalData, Action<TablesideLocator, NSError> callback);

		// -(void)releaseLocatorWithSite:(TablesideSite * _Nonnull)site locator:(TablesideLocator * _Nonnull)locator callback:(void (^ _Nonnull)(NSError * _Nullable))callback;
		[Export ("releaseLocatorWithSite:locator:callback:")]
		void ReleaseLocatorWithSite (TablesideSite site, TablesideLocator locator, Action<NSError> callback);

		// -(void)start:(TablesideLocator * _Nonnull)locator;
		[Export ("start:")]
		void Start (TablesideLocator locator);

		// -(NSError * _Nullable)stop __attribute__((warn_unused_result("")));
		[NullAllowed, Export ("stop")]
		NSError Stop { get; }
	}

	// @interface FlyBuyTableside_Swift_271 (FlyBuyTablesideManager)
	[Category]
	[BaseType (typeof(FlyBuyTablesideManager))]
	interface FlyBuyTablesideManager_FlyBuyTableside_Swift_271
	{
		// -(void)requestAlwaysAuthorization;
		[Export ("requestAlwaysAuthorization")]
		void RequestAlwaysAuthorization ();

		// -(void)requestWhenInUseAuthorization;
		[Export ("requestWhenInUseAuthorization")]
		void RequestWhenInUseAuthorization ();
	}

	// @interface FlyBuyTablesideError : NSObject
	[BaseType (typeof(NSObject))]
	[DisableDefaultCtor]
	interface FlyBuyTablesideError
	{
		// @property (readonly, nonatomic) enum TablesideErrorType type;
		[Export ("type")]
		TablesideErrorType Type { get; }

		// -(instancetype _Nonnull)init:(enum TablesideErrorType)typeIn __attribute__((objc_designated_initializer));
		[Export ("init:")]
		[DesignatedInitializer]
		IntPtr Constructor (TablesideErrorType typeIn);

		// @property (readonly, copy, nonatomic) NSString * _Nonnull description;
		[Export ("description")]
		string Description { get; }
	}

	// @interface TablesideLocator : NSObject
	[BaseType (typeof(NSObject), Name = "_TtC15FlyBuyTableside16TablesideLocator")]
	interface TablesideLocator
	{
	}

	// @protocol TablesideLocatorDelegate
	[Protocol (Name = "_TtP15FlyBuyTableside24TablesideLocatorDelegate_"), Model (AutoGeneratedName = true)]
	interface TablesideLocatorDelegate
	{
		// @optional -(void)locatorDidStart:(TablesideLocator * _Nonnull)locator;
		[Export ("locatorDidStart:")]
		void LocatorDidStart (TablesideLocator locator);

		// @optional -(void)locatorDidStop:(TablesideLocator * _Nonnull)locator;
		[Export ("locatorDidStop:")]
		void LocatorDidStop (TablesideLocator locator);

		// @optional -(void)locatorDidFail:(TablesideLocator * _Nonnull)locator error:(NSError * _Nonnull)error;
		[Export ("locatorDidFail:error:")]
		void LocatorDidFail (TablesideLocator locator, NSError error);
	}

	// @interface FlyBuyLogger : NSObject
	[BaseType (typeof(NSObject))]
	[DisableDefaultCtor]
	interface FlyBuyLogger
	{
	}

	// @interface TablesideSite : NSObject
	[BaseType (typeof(NSObject))]
	[DisableDefaultCtor]
	interface TablesideSite : INativeObject
	{
	}

	// @protocol TablesideSiteMonitorDelegate
	[Protocol (Name = "_TtP15FlyBuyTableside28TablesideSiteMonitorDelegate_"), Model (AutoGeneratedName = true)]
	interface TablesideSiteMonitorDelegate
	{
		// @optional -(void)siteMonitorDidFailWithError:(NSError * _Nonnull)error;
		[Export ("siteMonitorDidFailWithError:")]
		void SiteMonitorDidFailWithError (NSError error);

		// @optional -(void)siteMonitorDidStop;
		[Export ("siteMonitorDidStop")]
		void SiteMonitorDidStop ();

		// @optional -(void)siteMonitorDidStart;
		[Export ("siteMonitorDidStart")]
		void SiteMonitorDidStart ();

		// @optional -(void)siteMonitor:(TablesideSite * _Nonnull)site didReceiveEvent:(enum TablesideSiteEvent)type;
		[Export ("siteMonitor:didReceiveEvent:")]
		void SiteMonitor (TablesideSite site, TablesideSiteEvent type);
	}
}
